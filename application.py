import streamlit as st
import joblib
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
@st.cache_resource
def load_model():
    model = joblib.load('xgboost_model.pkl')
    vectorizer = joblib.load('tfidf_vectorizer.pkl')
    label_encoder = joblib.load('label_encoder.pkl')
    return model, vectorizer, label_encoder

model, vectorizer, label_encoder = load_model()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
st.set_page_config(
    page_title="URL Classifier",
    page_icon="üåê",
    layout="centered",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üåê –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä URL")
st.markdown("""
    –≠—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–∏–ø URL-–∞–¥—Ä–µ—Å–∞: **phishing**, **benign**, **defacement** –∏–ª–∏ **malware**.
    –í–≤–µ–¥–∏—Ç–µ URL –≤ –ø–æ–ª–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å**.
""")

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ URL
url_input = st.text_input("–í–≤–µ–¥–∏—Ç–µ URL:", placeholder="https://example.com")

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
if st.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å"):
    if url_input:
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ URL –≤ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        url_vectorized = vectorizer.transform([url_input])

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(url_vectorized)
        prediction_proba = model.predict_proba(url_vectorized)

        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        predicted_class = label_encoder.inverse_transform(prediction)[0]
        probabilities = {label_encoder.classes_[i]: prediction_proba[0][i] for i in range(len(label_encoder.classes_))}

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        st.success(f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø: **{predicted_class}**")

        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π
        st.subheader("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞:")
        proba_df = pd.DataFrame(list(probabilities.items()), columns=["–ö–ª–∞—Å—Å", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"])
        st.bar_chart(proba_df.set_index("–ö–ª–∞—Å—Å"))

    else:
        st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL.")